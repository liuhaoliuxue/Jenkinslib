#!groovy
//引用Library库
@Library('jenkinslib') _  
def mytools = new org.devops.tools()

String workspace = "/opt/jenkins/workspace"
//Pipline
pipeline {
	agent {
		node {
			label "master" //指定运行节点的标签或者名称
			customWorkspace "${workspace}"
		}
	}
	//string 字符串类型的参数, 例如:
	parameters { 
		string(name: 'DEPLOY_ENV', defaultValue: 'staging', description: '') 
	}

	triggers {
		cron('H */4 * * 1-5')
	}
	options {
		timestamps() //日志会有时间
		skipDefaultCheckout() //删除隐藏checkout scm语句
		disableConcurrentBuilds() //禁止并行
		timeout(time: 1, unit: 'HOURS') //流水线超时设置1h
	}
	stages {
		
		//下载代码
		stage("GetCode"){//阶段名称
			when {
				environment name: 'test', value: 'abcd'  //当test值=abcd时，执行下面step操作
			}
			input {
				message "Should we continue?"
				ok "Yes, we should."
				submitter "alice,bob"
				parameters {
					string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?')
				}
			}
			steps{//步骤
				timeout(time:5, unit: "MINUTES"){//步骤超时时间
					script{//填写运动代码
						println('获取代码')
						println("${test}")
						echo "Hello ${params.DEPLOY_ENV}"
						mvnHome = tool "m2"
						javaHome = tool "jdk"
						println(mvnHome)
						sh "${mvnHome}/bin/mvn --version"
						echo "Hello, ${PERSON}, nice to meet you."
						mytools.PrintMes("获取代码",'green1')//引用Library库方法
					}
				}
			
			}
		}
		//构建
		stage("Build"){//阶段名称
			steps{//步骤
				timeout(time:20, unit: "MINUTES"){//步骤超时时间
					script{//填写运动代码
						println('应用打包')
					}
				}
			
			}
		}
		//并行构建
		stage("Buildmerge"){//阶段名称
			failFast true // 当其中一个进程失败时，强制所有的 parallel 阶段都被终止
			parallel {
				stage("Build01"){//阶段名称
					steps{//步骤
						timeout(time:20, unit: "MINUTES"){//步骤超时时间
							script{//填写运动代码
								println('应用打包并行一')
							}
						}
					}
				}
				stage("Build02"){//阶段名称
					steps{//步骤
						timeout(time:20, unit: "MINUTES"){//步骤超时时间
							script{//填写运动代码
								println('应用打包并行二')
							}
						}
					}
				}
			}
		}			
		
		//代码扫描
		stage("CodeScan"){//阶段名称
			steps{//步骤
				timeout(time:30, unit: "MINUTES"){//步骤超时时间
					script{//填写运动代码
						println('代码扫描')
					}
				}
			
			}
		}
	}
	post {
		always {
			script {
				println("always")
			}
		}
		success {
			script {
				currentBuild.description = "\n 构建成功"
			}
		}
		failure {
			script {
				currentBuild.description = "\n 构建失败"
			}
		}
		aborted {
			script {
				currentBuild.description = "\n 构建取消"
			}
		}
	}
}
